# K-diff Pairs in an Array

# Approach 1 - Brute Force
# Time Complexity : O(n^2)

def countPairsWithDiffK(arr, n, k):
    count = 0
     
    # Pick all elements one by one
    for i in range(0, n):
         
        # See if there is a pair of this picked element
        for j in range(i+1, n) :
             
            if arr[i] - arr[j] == k or arr[j] - arr[i] == k:
                count += 1
                 
    return count
 
# Driver program
arr = [1, 5, 3, 4, 2]
 
n = len(arr)
k = 3
print ("Count of pairs with given diff is ",
                countPairsWithDiffK(arr, n, k))



# Approach 2- Binary Search
# Time Complexity: O(logn)

class Solution(object):
    def findPairs(self, nums, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: int
        """
        if k < 0:
            return 0

        def binary_search(arr, target):
            left, right = 0, len(arr) - 1
            while left <= right:
                mid = left + (right - left) // 2
                if arr[mid] == target:
                    return True
                elif arr[mid] < target:
                    left = mid + 1
                else:
                    right = mid - 1
            return False

        nums.sort()  # Sort the array for binary search

        unique_pairs = set()
        for i in range(len(nums)):
            # Check for pairs based on the value of k
            if k == 0:
                if i < len(nums) - 1 and nums[i] == nums[i + 1]:
                    unique_pairs.add((nums[i], nums[i + 1]))
            else:
                target = nums[i] + k
                if binary_search(nums, target):
                    unique_pairs.add((nums[i], target))

        return len(unique_pairs)

# Example usage:
solution = Solution()
print(solution.findPairs([3, 1, 4, 1, 5], 2))  # Output: 2
print(solution.findPairs([1, 2, 3, 4, 5], 1))   # Output: 4
print(solution.findPairs([1, 3, 1, 5, 4], 0))   # Output: 1
