# -*- coding: utf-8 -*-
"""Competitive Coding 1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13MKIxukN91OB3aps2gJ5LmGsv2_4O4xb

Find Missing Number in a sorted array
"""

def BinarySearch(nums):
  low=0
  high=len(nums)
  while(low <= high):
    mid=(low+high)//2
    if high-low==1 and nums[high]-nums[low]==2:
      return nums[low]+1
    if (mid-low == nums[mid]-nums[low]):
      low=mid
    else:
      high=mid
  return 1

nums=[1,3,4,5,6]
print(BinarySearch(nums))

"""Priority Queue using Linked List"""

class PriorityQueueNode:
	
  def __init__(self, value, pr):
    
    self.data = value
    self.priority = pr
    self.next = None
		
class PriorityQueue:
	
	def __init__(self):
		
		self.front = None

	def isEmpty(self):
		
		return True if self.front == None else False

	def push(self, value, priority):
		if self.isEmpty() == True:
			self.front = PriorityQueueNode(value,
										priority)
			return 1
			
		else:
			if self.front.priority > priority:
				newNode = PriorityQueueNode(value, priority)
				newNode.next = self.front
				self.front = newNode
				return 1
				
			else:
				temp = self.front			
				while temp.next:
					if priority <= temp.next.priority:
						break
					
					temp = temp.next
				
				newNode = PriorityQueueNode(value, priority)
				newNode.next = temp.next
				temp.next = newNode
				return 1

	def pop(self):

		if self.isEmpty() == True:
			return	
		else:
			self.front = self.front.next
			return 1

	def peek(self):
		if self.isEmpty() == True:
			return
		else:
			return self.front.data

	def traverse(self):
		if self.isEmpty() == True:
			return "Queue is Empty!"
		else:
			temp = self.front
			while temp:
				print(temp.data, end = " ")
				temp = temp.next

pq = PriorityQueue()
pq.push(4, 1)
pq.push(5, 2)
pq.push(6, 3)
pq.push(7, 0)
pq.traverse()
pq.pop()