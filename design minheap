class MinHeap:
    def __init__(self):
        self.heap = []

    def _left_child(self, index):          #to get index of left child
        return 2 * index + 1

    def _right_child(self, index):        #to get index of right child
        return 2 * index + 2

    def _parent(self, index):             #to get index of parent child
        return (index - 1) // 2
 
    def _swap(self, index1, index2):      #to swap two numbers in a list/heap
        self.heap[index1], self.heap[index2] = self.heap[index2], self.heap[index1]

    def insert(self, value):              #function to add new number and adjust the heap #time complexity: O(log n), space complexity: O(1)
        self.heap.append(value)
        current = len(self.heap)-1
        while current > 0 and self.heap[current]<self.heap[self._parent(current)]:
            self._swap(current, self._parent(current))
            current = self._parent(current)

    def getMin(self):                  #function to return min number in heap #time and space complexity: O(1)
        return self.heap[0]

    def _sink_down(self, index):      #helper method for extractMin (remove min in heap) #it adjusts the heap again after removal
        min_index = index
        while True:
            left_index = self._left_child(index)
            right_index = self._right_child(index)

            if (left_index < len(self.heap) and
                    self.heap[left_index] < self.heap[min_index]):
                min_index = left_index

            if (right_index < len(self.heap) and
                    self.heap[right_index] < self.heap[min_index]):
                min_index = right_index

            if min_index != index:
                self._swap(index, min_index)
                index = min_index
            else:
                return

    def extractMin(self):                          #to remove the min number from a heap   #time complexity: O(log n), space complexity: O(1)
        if len(self.heap) == 0: return None
        if len(self.heap) == 1: return self.heap.pop()

        min_value = self.heap[0]
        self.heap[0] = self.heap.pop()
        self._sink_down(0)

        return min_value
